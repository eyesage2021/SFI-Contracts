/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { providers, Signer, ethers } from "ethers";
import React, { useEffect, useState } from "react";
import Web3Modal, { IProviderOptions } from "web3modal";
import { SFIIceAge918 } from "./typechain/SFIIceAge918";
import { SFIIceAge918__factory } from "./typechain/factories/SFIIceAge918__factory";
import { Owned } from "./typechain/Owned";
import { Owned__factory } from "./typechain/factories/Owned__factory";
import { ERC20 } from "./typechain/ERC20";
import { ERC20__factory } from "./typechain/factories/ERC20__factory";
import { SL31010 } from "./typechain/SL31010";
import { SL31010__factory } from "./typechain/factories/SL31010__factory";
import StakingRewardsPGLSFIDeployment from "./deployments/avax/StakingRewardsPGLSFI.json";
import { StakingRewardsPGLSFI } from "./typechain/StakingRewardsPGLSFI";
import { StakingRewardsPGLSFI__factory } from "./typechain/factories/StakingRewardsPGLSFI__factory";
import StakingRewardsSFITaxDeployment from "./deployments/avax/StakingRewardsSFITax.json";
import { StakingRewardsSFITax } from "./typechain/StakingRewardsSFITax";
import { StakingRewardsSFITax__factory } from "./typechain/factories/StakingRewardsSFITax__factory";
import StakingRewardsPGLSL3Deployment from "./deployments/avax/StakingRewardsPGLSL3.json";
import { StakingRewardsPGLSL3 } from "./typechain/StakingRewardsPGLSL3";
import { StakingRewardsPGLSL3__factory } from "./typechain/factories/StakingRewardsPGLSL3__factory";
import StakingRewardsSL3TaxDeployment from "./deployments/avax/StakingRewardsSL3Tax.json";
import { StakingRewardsSL3Tax } from "./typechain/StakingRewardsSL3Tax";
import { StakingRewardsSL3Tax__factory } from "./typechain/factories/StakingRewardsSL3Tax__factory";

const emptyContract = {
    instance: undefined,
    factory: undefined
};
const defaultProvider: providers.Provider | undefined = undefined;
export const ProviderContext = React.createContext<[providers.Provider | undefined, React.Dispatch<React.SetStateAction<providers.Provider | undefined>>]>([defaultProvider, () => { }]);
const defaultCurrentAddress: string = "";
export const CurrentAddressContext = React.createContext<[string, React.Dispatch<React.SetStateAction<string>>]>([defaultCurrentAddress, () => { }]);
const defaultSigner: Signer | undefined = undefined;
export const SignerContext = React.createContext<[Signer | undefined, React.Dispatch<React.SetStateAction<Signer | undefined>>]>([defaultSigner, () => { }]);
const defaultSymfoniContext: SymfoniContextInterface = {
    currentHardhatProvider: "",
    init: () => { throw Error("Symfoni context not initialized") },
    loading: false,
    messages: [],
    providers: []
};
export const SymfoniContext = React.createContext<SymfoniContextInterface>(defaultSymfoniContext);
export const SFIIceAge918Context = React.createContext<SymfoniSFIIceAge918>(emptyContract);
export const OwnedContext = React.createContext<SymfoniOwned>(emptyContract);
export const ERC20Context = React.createContext<SymfoniERC20>(emptyContract);
export const SL31010Context = React.createContext<SymfoniSL31010>(emptyContract);
export const StakingRewardsPGLSFIContext = React.createContext<SymfoniStakingRewardsPGLSFI>(emptyContract);
export const StakingRewardsSFITaxContext = React.createContext<SymfoniStakingRewardsSFITax>(emptyContract);
export const StakingRewardsPGLSL3Context = React.createContext<SymfoniStakingRewardsPGLSL3>(emptyContract);
export const StakingRewardsSL3TaxContext = React.createContext<SymfoniStakingRewardsSL3Tax>(emptyContract);

export interface SymfoniContextInterface {
    init: (provider?: string) => void;
    loading: boolean;
    messages: string[];
    currentHardhatProvider: string;
    providers: string[];
}

export interface SymfoniProps {
    autoInit?: boolean;
    showLoading?: boolean;
    loadingComponent?: React.ReactNode;
}

export interface SymfoniSFIIceAge918 {
    instance?: SFIIceAge918;
    factory?: SFIIceAge918__factory;
}

export interface SymfoniOwned {
    instance?: Owned;
    factory?: Owned__factory;
}

export interface SymfoniERC20 {
    instance?: ERC20;
    factory?: ERC20__factory;
}

export interface SymfoniSL31010 {
    instance?: SL31010;
    factory?: SL31010__factory;
}

export interface SymfoniStakingRewardsPGLSFI {
    instance?: StakingRewardsPGLSFI;
    factory?: StakingRewardsPGLSFI__factory;
}

export interface SymfoniStakingRewardsSFITax {
    instance?: StakingRewardsSFITax;
    factory?: StakingRewardsSFITax__factory;
}

export interface SymfoniStakingRewardsPGLSL3 {
    instance?: StakingRewardsPGLSL3;
    factory?: StakingRewardsPGLSL3__factory;
}

export interface SymfoniStakingRewardsSL3Tax {
    instance?: StakingRewardsSL3Tax;
    factory?: StakingRewardsSL3Tax__factory;
}

export const Symfoni: React.FC<SymfoniProps> = ({
    showLoading = true,
    autoInit = true,
    ...props
}) => {
    const [initializeCounter, setInitializeCounter] = useState(0);
    const [currentHardhatProvider, setCurrentHardhatProvider] = useState("");
    const [loading, setLoading] = useState(false);
    const [messages, setMessages] = useState<string[]>([]);
    const [signer, setSigner] = useState<Signer | undefined>(defaultSigner);
    const [provider, setProvider] = useState<providers.Provider | undefined>(defaultProvider);
    const [currentAddress, setCurrentAddress] = useState<string>(defaultCurrentAddress);
    const [fallbackProvider] = useState<string | undefined>(undefined);
    const [providerPriority, setProviderPriority] = useState<string[]>(["web3modal", "hardhat"]);
    const [SFIIceAge918, setSFIIceAge918] = useState<SymfoniSFIIceAge918>(emptyContract);
    const [Owned, setOwned] = useState<SymfoniOwned>(emptyContract);
    const [ERC20, setERC20] = useState<SymfoniERC20>(emptyContract);
    const [SL31010, setSL31010] = useState<SymfoniSL31010>(emptyContract);
    const [StakingRewardsPGLSFI, setStakingRewardsPGLSFI] = useState<SymfoniStakingRewardsPGLSFI>(emptyContract);
    const [StakingRewardsSFITax, setStakingRewardsSFITax] = useState<SymfoniStakingRewardsSFITax>(emptyContract);
    const [StakingRewardsPGLSL3, setStakingRewardsPGLSL3] = useState<SymfoniStakingRewardsPGLSL3>(emptyContract);
    const [StakingRewardsSL3Tax, setStakingRewardsSL3Tax] = useState<SymfoniStakingRewardsSL3Tax>(emptyContract);
    useEffect(() => {
        if (messages.length > 0)
            console.debug(messages.pop())
    }, [messages])

    const getProvider = async (): Promise<{ provider: providers.Provider, hardhatProviderName: string } | undefined> => {
        let hardhatProviderName = "Not set";
        let _providerPriority = [...providerPriority];
        // Fallback provider
        if (fallbackProvider && autoInit && initializeCounter === 0) {
            if (localStorage.getItem("WEB3_CONNECT_CACHED_PROVIDER") === null) {
                _providerPriority = _providerPriority.sort((a, b) => {
                    return a === fallbackProvider ? -1 : b === fallbackProvider ? 1 : 0;
                })
            }
        }
        const provider = await _providerPriority.reduce(async (maybeProvider: Promise<providers.Provider | undefined>, providerIdentification) => {
            let foundProvider = await maybeProvider
            if (foundProvider) {
                return Promise.resolve(foundProvider)
            }
            else {
                switch (providerIdentification.toLowerCase()) {
                    case "web3modal":
                        try {
                            const provider = await getWeb3ModalProvider()
                            const web3provider = new ethers.providers.Web3Provider(provider);
                            hardhatProviderName = "web3modal";
                            return Promise.resolve(web3provider)
                        } catch (error) {
                            return Promise.resolve(undefined)
                        }
                    case "hardhat":
                        try {
                            const provider = new ethers.providers.JsonRpcProvider({
                                url: "http://127.0.0.1:8545",
                            });
                            hardhatProviderName = "hardhat";
                            return Promise.resolve(provider)
                        } catch (error) {
                            return Promise.resolve(undefined)
                        } default:
                        return Promise.resolve(undefined)
                }
            }
        }, Promise.resolve(undefined)) // end reduce
        return provider ? { provider, hardhatProviderName } : undefined
    };
    const getSigner = async (_provider: providers.Provider, hardhatProviderName: string): Promise<Signer | undefined> => {
        switch (hardhatProviderName) {
            case "web3modal":
                const web3provider = _provider as ethers.providers.Web3Provider
                return await web3provider.getSigner()
            default:
                return undefined
        }
    };
    const getWeb3ModalProvider = async (): Promise<any> => {
        const providerOptions: IProviderOptions = {

        };
        const web3Modal = new Web3Modal({
            // network: "mainnet",
            cacheProvider: false,
            providerOptions, // required
        });
        return await web3Modal.connect();
    };

    useEffect(() => {
        let subscribed = true
        const doAsync = async () => {
            const finish = (text: string) => {
                setLoading(false)
                setMessages(old => [...old, text])
            }
            const finishWithContracts = (text: string) => {
                setSFIIceAge918(getSFIIceAge918(_provider, _signer))
                setOwned(getOwned(_provider, _signer))
                setERC20(getERC20(_provider, _signer))
                setSL31010(getSL31010(_provider, _signer))
                setStakingRewardsPGLSFI(getStakingRewardsPGLSFI(_provider, _signer))
                setStakingRewardsSFITax(getStakingRewardsSFITax(_provider, _signer))
                setStakingRewardsPGLSL3(getStakingRewardsPGLSL3(_provider, _signer))
                setStakingRewardsSL3Tax(getStakingRewardsSL3Tax(_provider, _signer))
                finish(text)
            }
            if (!autoInit && initializeCounter === 0) return finish("Auto init turned off.")
            setLoading(true)
            setMessages(old => [...old, "Initiating Symfoni React"])
            const providerObject = await getProvider() // getProvider can actually return undefined, see issue https://github.com/microsoft/TypeScript/issues/11094

            if (!subscribed || !providerObject) return finish("No provider or signer.")
            const _provider = providerObject.provider
            setProvider(_provider)
            setMessages(old => [...old, "Useing " + providerObject.hardhatProviderName])
            setCurrentHardhatProvider(providerObject.hardhatProviderName)
            const _signer = await getSigner(_provider, providerObject.hardhatProviderName);

            if (!subscribed || !_signer) return finishWithContracts("Provider, without signer.")
            setSigner(_signer)
            setMessages(old => [...old, "Useing signer"])
            const address = await _signer.getAddress()

            if (!subscribed || !address) return finishWithContracts("Provider and signer, without address.")
            setCurrentAddress(address)

            return finishWithContracts("Completed Symfoni context initialization.")
        };
        doAsync();
        return () => { subscribed = false }
    }, [initializeCounter])

    const getSFIIceAge918 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SFIIceAge918__factory.connect(ethers.constants.AddressZero, _signer) : SFIIceAge918__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSFIIceAge918 = {
            instance: instance,
            factory: _signer ? new SFIIceAge918__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getOwned = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? Owned__factory.connect(ethers.constants.AddressZero, _signer) : Owned__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniOwned = {
            instance: instance,
            factory: _signer ? new Owned__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getERC20 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? ERC20__factory.connect(ethers.constants.AddressZero, _signer) : ERC20__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniERC20 = {
            instance: instance,
            factory: _signer ? new ERC20__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getSL31010 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = _signer ? SL31010__factory.connect(ethers.constants.AddressZero, _signer) : SL31010__factory.connect(ethers.constants.AddressZero, _provider)
        const contract: SymfoniSL31010 = {
            instance: instance,
            factory: _signer ? new SL31010__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getStakingRewardsPGLSFI = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = StakingRewardsPGLSFIDeployment.receipt.contractAddress
        const instance = _signer ? StakingRewardsPGLSFI__factory.connect(contractAddress, _signer) : StakingRewardsPGLSFI__factory.connect(contractAddress, _provider)
        const contract: SymfoniStakingRewardsPGLSFI = {
            instance: instance,
            factory: _signer ? new StakingRewardsPGLSFI__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getStakingRewardsSFITax = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = StakingRewardsSFITaxDeployment.receipt.contractAddress
        const instance = _signer ? StakingRewardsSFITax__factory.connect(contractAddress, _signer) : StakingRewardsSFITax__factory.connect(contractAddress, _provider)
        const contract: SymfoniStakingRewardsSFITax = {
            instance: instance,
            factory: _signer ? new StakingRewardsSFITax__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getStakingRewardsPGLSL3 = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = StakingRewardsPGLSL3Deployment.receipt.contractAddress
        const instance = _signer ? StakingRewardsPGLSL3__factory.connect(contractAddress, _signer) : StakingRewardsPGLSL3__factory.connect(contractAddress, _provider)
        const contract: SymfoniStakingRewardsPGLSL3 = {
            instance: instance,
            factory: _signer ? new StakingRewardsPGLSL3__factory(_signer) : undefined,
        }
        return contract
    }
        ;
    const getStakingRewardsSL3Tax = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = StakingRewardsSL3TaxDeployment.receipt.contractAddress
        const instance = _signer ? StakingRewardsSL3Tax__factory.connect(contractAddress, _signer) : StakingRewardsSL3Tax__factory.connect(contractAddress, _provider)
        const contract: SymfoniStakingRewardsSL3Tax = {
            instance: instance,
            factory: _signer ? new StakingRewardsSL3Tax__factory(_signer) : undefined,
        }
        return contract
    }
        ;

    const handleInitProvider = (provider?: string) => {
        if (provider) {
            setProviderPriority(old => old.sort((a, b) => {
                return a === provider ? -1 : b === provider ? 1 : 0;
            }))
        }
        setInitializeCounter(initializeCounter + 1)
    }
    return (
        <SymfoniContext.Provider value={{ init: (provider) => handleInitProvider(provider), providers: providerPriority, currentHardhatProvider, loading, messages }}>
            <ProviderContext.Provider value={[provider, setProvider]}>
                <SignerContext.Provider value={[signer, setSigner]}>
                    <CurrentAddressContext.Provider value={[currentAddress, setCurrentAddress]}>
                        <SFIIceAge918Context.Provider value={SFIIceAge918}>
                            <OwnedContext.Provider value={Owned}>
                                <ERC20Context.Provider value={ERC20}>
                                    <SL31010Context.Provider value={SL31010}>
                                        <StakingRewardsPGLSFIContext.Provider value={StakingRewardsPGLSFI}>
                                            <StakingRewardsSFITaxContext.Provider value={StakingRewardsSFITax}>
                                                <StakingRewardsPGLSL3Context.Provider value={StakingRewardsPGLSL3}>
                                                    <StakingRewardsSL3TaxContext.Provider value={StakingRewardsSL3Tax}>
                                                        {showLoading && loading ?
                                                            props.loadingComponent
                                                                ? props.loadingComponent
                                                                : <div>
                                                                    {messages.map((msg, i) => (
                                                                        <p key={i}>{msg}</p>
                                                                    ))}
                                                                </div>
                                                            : props.children
                                                        }
                                                    </StakingRewardsSL3TaxContext.Provider >
                                                </StakingRewardsPGLSL3Context.Provider >
                                            </StakingRewardsSFITaxContext.Provider >
                                        </StakingRewardsPGLSFIContext.Provider >
                                    </SL31010Context.Provider >
                                </ERC20Context.Provider >
                            </OwnedContext.Provider >
                        </SFIIceAge918Context.Provider >
                    </CurrentAddressContext.Provider>
                </SignerContext.Provider>
            </ProviderContext.Provider>
        </SymfoniContext.Provider>
    )

};
